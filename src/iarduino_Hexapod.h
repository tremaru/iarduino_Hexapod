//	Библиотека для работы с HEXAPOD'ом: http://iarduino.ru/shop/Mehanika/robot-hexapod-shestinogiy.html
//  Версия: 1.0.1
//  Последнюю версию библиотеки Вы можете скачать по ссылке: http://iarduino.ru/file/258.html
//  Подробное описание функции бибилиотеки доступно по ссылке: http://wiki.iarduino.ru/page/sborka-hexapod-elektronika/
//  Библиотека является собственностью интернет магазина iarduino.ru и может свободно использоваться и распространяться!
//  При публикации устройств или скетчей с использованием данной библиотеки, как целиком, так и её частей,
//  в том числе и в некоммерческих целях, просим Вас опубликовать ссылку: http://iarduino.ru
//  Автор библиотеки: Панькин Павел
//  Если у Вас возникли технические вопросы, напишите нам: shop@iarduino.ru

#ifndef iarduino_Hexapod_h
#define iarduino_Hexapod_h
#include <iarduino_MultiServo.h>
#include <EEPROM.h>
#include "Servos.h"

#if defined(ARDUINO) && (ARDUINO >= 100)
#include <Arduino.h>
#else
#include <WProgram.h>
#endif

// команды для функции go
#define	COM_SLEEP			100	//	команда  спать
#define	GO_ON				101	//	движение вперед
#define	GO_BACK				102	//	движение назад
#define	GO_LEFT				103	//	поворот  влево
#define	GO_RIGHT			104	//	поворот  вправо
#define	GO_ON_LEFT			105	//	движение вперед и поворот влево
#define	GO_ON_RIGHT			106	//	движение вперед и поворот вправо
#define	GO_BACK_LEFT		107	//	движение назад  и поворот влево
#define	GO_BACK_RIGHT		108	//	движение назад  и поворот вправо
#define	COM_STOP			109	//	команда  стоп
#define	COM_SIT				110	//	команда  сидеть
#define	COM_NOD				111	//	команда  поклон
#define	COM_UP				112	//	команда  встать
#define	COM_LAY				113	//	команда  лежать
#define	COM_TEST			114	//	команда  тест
#define	COM_EMPTY			255	//	команда  пустая

#define	SERVO_FREE			255	//	освободить сустав (свободный ход)

// команды для функции position

// команды для функции motion

class iarduino_Hexapod{
	public:			iarduino_Hexapod	(uint8_t=255,uint8_t=255,uint8_t=13);	//										(кнопка A, кнопка B, светодиод)	
	/**	пользовательские функции **/
		void		begin						(uint8_t);						//	инициализация HEXAPOD				(тип сервоприводов)
		void		calibration					();								//	калибровка суставов конечностей		(без параметров)
		void		calibration_reset			();								//	сброс калибровки					(без параметров)
		void		go							(int=255,int=255,int=255);		//	движение							(-10 лево / +10 право , -10 назад / +10 вперед , -10 низ / +10 верх)
																				//										(команда , скорость / параметр)
		void		set_motion					(uint8_t,uint8_t,uint8_t);		//	движение одной/всеми конечностями	(номер конечности: 1-6 / 255 , номер сустава: 1=V / 2=H , положение сустава: внизу-сзади 0...50...100 вверху-спереди / 255)
//		uint8_t		get_motion					(uint8_t,uint8_t);				//	текущее положение одной конечности	(номер конечности: 1-6       , номер сустава: 1=V / 2=H)
		void		set_motionA					(uint8_t,int,bool=0,bool=0);	//	движение одной/всеми конечностями	(номер конечности: 1-6 / 255 , градус движения: 1-360 , учитывать ограничение по вертикали: iXP_limit_Ver % , учитывать ограничение по горизонтали: iXP_limit_Hor % )
//		uint8_t		get_motionA					(uint8_t,uint8_t);				//	текущее положение одной конечности	(номер конечности: 1-6       , номер сустава: 1=V / 2=H)
	/**	пользовательские переменные **/
		uint8_t		walking						= 2;							//	тип походки
	private:
	/**	внутренние функции **/
		void		iXP_func_Go					(uint8_t,uint8_t);				//	движение по константам				(GO_ON вперед / GO_BACK назад / ... , скорость / параметр)
		uint8_t		iXP_func_JointPin			(uint8_t,uint8_t);				//	определение номера вывода			(номер конечности 1-6 , номер сустава 1=V / 2=H)
		uint8_t		iXP_func_AngleVer			(uint8_t,uint8_t);				//	определение угла по вертикали		(номер конечности 1-6 , положение вертикального   сустава: внизу 0...50...100 вверху)
		uint8_t		iXP_func_AngleHor			(uint8_t,uint8_t);				//	определение угла по горизонтали		(номер конечности 1-6 , положение горизонтального сустава: сзади 0...50...100 спереди)
		bool		iXP_func_ReadAngleCenter	();								//	чтение сохранённых значений центрального угла, для каждого сустава, каждой конечности
		void		iXP_func_CalibrationLed		();								//	управление светодиодом во время калибровки
	/**	внутренние переменные **/
					iarduino_MultiServo iXP_MSS;
		#include	"Settings.h"												//	настройки суставов конечностей
		uint8_t		iXP_angle_Hor_Center[6]		= {95,95,95,95,95,95};			//	центральный угол горизонтального сустава для каждой конечности
		uint8_t		iXP_angle_Ver_Center[6]		= {95,80,95,80,95,80};			//	центральный угол вертикального   сустава для каждой конечности
		uint8_t		iXP_angle_Odd_Calibration	= 30;							//	верхний угол при установке  нечетных конечностей (во время калибровки)
		uint8_t		iXP_angle_Evn_Calibration	= 150;							//	верхний угол при установке    четных конечностей (во время калибровки)
		uint8_t		iXP_limit_Ver				= 50;							//	ограничение по вертикали   0 - 100%
		uint8_t		iXP_limit_Hor_Odd			= 0;							//	ограничение по горизонтали 0 - 100% (для нечетных конечностей)
		uint8_t		iXP_limit_Hor_Evn			= 0;							//	ограничение по горизонтали 0 - 100% (для   четных конечностей)
		int16_t		iXP_gogo_360				= 0;							//	текущий градус движения    0 - 360
		bool		iXP_flag_Calibration		= false;						//	флаг указывающий о том, что калибровка была произведена
		uint8_t		iXP_step_Calibration		= 0;							//	шаг/этап калибровки
		uint8_t		iXP_pins_ButtonA;											//	номера вывода к которому подключена кнопка A
		uint8_t		iXP_time_ButtonA			= 0;							//	время удержания кнопки A
		uint8_t		iXP_pins_ButtonB;											//	номера вывода к которому подключена кнопка B
		uint8_t		iXP_time_ButtonB			= 0;							//	время удержания кнопки B
		uint8_t		iXP_pins_LED;												//	номера вывода к которому подключен светодиод
	unsigned long	iXP_time_LED				= 0;							//	время включения светодиода в мс
		uint16_t	iXP_time_ButtonDelay		= 2000;							//	время удержания кнопок для перехода по режимам калибровки (в мс)
		uint16_t	iXP_addr_EEPROM				= 497;							//	адрес (от 0 до 497) первой, из 13, ячеек памяти EEPROM в которых хранятся значения горизонтальных и вертикальных настроек
};

#endif